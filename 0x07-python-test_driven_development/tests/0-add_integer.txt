# 0-add_integer.txt
===============================
 How to 0-add_integer.py
 ===============================

This module provides a function called `add_integer(a, b=98)` for adding two integers.

Usage
=======

`add_integer(...)` returns the addition of its arguments. For numbers, that value is equivalent to using the `+` operator.

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(7, 3)
10

The function adds also floats casted to integers.

>>> add_integer(7.0, 3.0)
10

`b` have default value of 98 in case if no value has been assigned.

>>> add_integer(0)
98

>>> add_integer(-98)
0

>>> add_integer(2.0,)
100

>>> add_integer(-5.5,100.3)
95

Negatif numbers
===============

>>> add_integer(-1, -2)
-3

>>> add_integer(-1.4, -2.2)
-3


Non-Numbers
===========

Non-numbers should throw TypeError Exceptions.

>>> add_integer("string", 3)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(3, "string")
Traceback (most recent call last):
TypeError: b must be an integer


>>> add_integer({'a':1},)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: infinity cannot be converted to int

>>> add_integer(4, float('inf'))
Traceback (most recent call last):
OverflowError: infinity cannot be converted to int


>>> add_integer(float('inf'), 4)
Traceback (most recent call last):
OverflowError: infinity cannot be converted to int

>>> add_integer(float('NaN'))
Traceback (most recent call last):
TypeError: NaN cannot be converted to int


>>> add_integer(float('NaN'), 5)
Traceback (most recent call last):
TypeError: NaN cannot be converted to int


>>> add_integer(5, float('NaN'))
Traceback (most recent call last):
TypeError: NaN cannot be converted to int
